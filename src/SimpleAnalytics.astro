---
import {
  sanitizeBoolean,
  sanitizeCSV,
  sanitizeURL,
  sanitizeURLList,
} from "./utilities";

export interface Props {
  allEnvironments?: boolean;
  collectDNT?: boolean;
  customDomain?: string;
  customHostname?: string;
  ignorePages?: string;
  light?: boolean;
  nonUniqueHostnames?: string;
  partytown?: boolean;
  debug?: boolean;
  strictUTMs?: boolean;
  allowParams?: string;
  ignoreMetrics?: string;
}

const {
  allEnvironments = false,
  collectDNT = false,
  customDomain = undefined,
  customHostname = undefined,
  ignorePages = undefined,
  light = false,
  nonUniqueHostnames = undefined,
  partytown = false,
  debug = false,
  strictUTMs = false,
  allowParams = undefined,
  ignoreMetrics = undefined,
} = Astro.props;

// prop sanitization
const sanitizedAllEnvironments = sanitizeBoolean(allEnvironments);
const sanitizedCollectDNT = sanitizeBoolean(collectDNT);
const sanitizedCustomDomain = sanitizeURL(customDomain);
const sanitizedLight = sanitizeBoolean(light);
const sanitizedCustomHostname = sanitizeURL(customHostname);
const sanitizedIgnorePages = sanitizeCSV(ignorePages);
const sanitizedNonUniqueHostnames = sanitizeURLList(nonUniqueHostnames);
const sanitizedPartytown = sanitizeBoolean(partytown);
const sanitizedDebug = sanitizeBoolean(debug);
const sanitizedStrictUTMs = sanitizeBoolean(strictUTMs);
const sanitizedAllowParams = sanitizeCSV(allowParams);
const sanitizedIgnoreMetrics = sanitizeCSV(ignoreMetrics);

// attribute generation
const realURL = new URL(Astro.url.origin);
const realHostname = `${realURL.hostname}${
  realURL.port ? ":" + realURL.port : ""
}`;
const desiredHostname = import.meta.env.SITE
  ? new URL(import.meta.env.SITE).hostname
  : realHostname;
let host;
if (sanitizedCustomHostname) {
  host = { "data-hostname": sanitizedCustomHostname };
} else if (sanitizedAllEnvironments) {
  host = { "data-hostname": desiredHostname };
} else {
  host = {};
}

const attrCollectDNT = sanitizedCollectDNT
  ? { "data-collect-dnt": "true" }
  : false;
const attrStrictUTMs = sanitizedStrictUTMs
  ? { "data-strict-utm": "true" }
  : false;
const attrAllowParams = sanitizedAllowParams
  ? { "data-allow-params": sanitizedAllowParams }
  : false;
const attrCustomHostname =
  sanitizedCustomHostname || sanitizedAllEnvironments ? host : false;
const attrIgnorePages = sanitizedIgnorePages
  ? { "data-ignore-pages": sanitizedIgnorePages }
  : false;
const attrNonUniqueHostnames = sanitizedNonUniqueHostnames
  ? { "data-non-unique-hostnames": sanitizedNonUniqueHostnames }
  : false;
const attrPartytown = sanitizedPartytown
  ? { type: "text/partytown" }
  : { type: "text/javascript" };
const attrIgnoreMetrics = sanitizedIgnoreMetrics
  ? { "data-ignore-metrics": sanitizedIgnoreMetrics }
  : false;
const attrs = {
  ...(attrCollectDNT ? attrCollectDNT : {}),
  ...(attrCustomHostname ? attrCustomHostname : {}),
  ...(attrIgnorePages ? attrIgnorePages : {}),
  ...(attrNonUniqueHostnames ? attrNonUniqueHostnames : {}),
  ...(attrPartytown ? attrPartytown : {}),
  ...(attrStrictUTMs ? attrStrictUTMs : {}),
  ...(attrAllowParams ? attrAllowParams : {}),
  ...(attrIgnoreMetrics ? attrIgnoreMetrics : {}),
};

// string parameter generation
const domain = sanitizedCustomDomain
  ? sanitizedCustomDomain
  : "scripts.simpleanalyticscdn.com";
const scriptfile = sanitizedLight ? "light.js" : "latest.js";
const imagefile = sanitizedCollectDNT ? "hello.gif" : "noscript.gif";
let specificHost;
if (sanitizedCustomHostname) {
  specificHost = `?hostname=${sanitizedCustomHostname}`;
} else if (sanitizedAllEnvironments) {
  specificHost = `?hostname=${desiredHostname}`;
} else {
  specificHost = "";
}
const specificHostname = specificHost;

// injectable string variable concatenation
const scriptSrc = `https://${domain}/${scriptfile}`;
const imageSrc = `https://queue.simpleanalyticscdn.com/${imagefile}${specificHostname}`;

// render boolean calculation
let show;
if (sanitizedAllEnvironments) {
  show = true;
} else if (import.meta.env.DEV) {
  show = false;
} else {
  show = true;
}
const showScripts = show;

if (sanitizedDebug) {
  /* eslint-disable no-console */
  console.log(
    "\n\n%cAstro Simple Analytics Plugin%c",
    "font-weight:bold;background-color:yellow;color:black",
    "background-color:transparent",
    "\n=============================",
    "\nLoaded with the following debug parameters:",
    Astro.props,
    "\nLoaded scripts from:",
    scriptSrc,
    "\nLoaded image from:",
    imageSrc,
    "\nAttributes:",
    attrs,
  );
  /* eslint-enable no-console */
}
---

<!-- Simple Analytics - 100% privacy-first analytics -->{
  showScripts && (
    <div class="SimpleAnalytics">
      <script is:inline async defer src={scriptSrc} {...attrs} />
      <noscript>
        <img
          src={imageSrc}
          alt=""
          referrerpolicy="no-referrer-when-downgrade"
        />
      </noscript>
    </div>
  )
}
{
  sanitizedDebug && (
    <div class="SimpleAnalytics" style="display:none;">
      <p>
        The Astro Simple Analytics Plugin component finished loading. You can
        see all the parameters used here and in the console:
      </p>
      <pre>{JSON.stringify(Astro.props, null, 2)}</pre>
      <p>
        Remember to have a look at our documentation for options regarding{" "}
        <a
          href="https://github.com/ViorelMocanu/astro-simpleanalytics-plugin/#-option-bypass-ad-blockers-"
          target="_blank"
          rel="external nofollow noreferrer"
        >
          circumventing adblocking
        </a>{" "}
        and{" "}
        <a
          href="https://docs.simpleanalytics.com/csp"
          target="_blank"
          rel="external nofollow noreferrer"
        >
          using a correct CSP (Content Security Policy)
        </a>{" "}
        so your scripts don't trigger console errors.
      </p>
    </div>
  )
}
